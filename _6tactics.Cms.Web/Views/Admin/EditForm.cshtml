@using _6tactics.Cms.Core.Helpers
@using _6tactics.Cms.Web.App_Logic
@using _6tactics.Cms.Web.Areas.Plugins.Enums.GoogleMaps
@using _6tactics.Utilities.Common
@using ContentType = _6tactics.Cms.Core.Enums.Admin.ContentType
@model _6tactics.Cms.Core.ViewModels.Admin.AdminActionsViewModel

@{
    //var imageUrl = ElementsVisibilityUtility.CreateImagePath(Model.ContentItemViewModel.Id, Model.ContentItemViewModel.FileUrl);
    var currentContentType = Model.CreateEditDataViewModel.CurrentContentType;

    bool isParentElementOrFile = Model.CreateEditDataViewModel.IsParentElementOrFile;


    bool isRouteTitleElementVisible = ElementsVisibilityUtility.IsRouteTitleElementVisibleOnEditPage(Model.ContentItemViewModel.ContentType);

    ViewBag.TitleElementWidth = isParentElementOrFile ? "col-md-8" : "col-md-6";

    if (isRouteTitleElementVisible)
    {
        ViewBag.TitleElementWidth = "col-md-4";
    }

    ViewBag.ElementVisibilityWidth = isParentElementOrFile ? "col-md-4" : "col-md-3";


    string elementColor = isParentElementOrFile ? "deepSkyBlue" : "steelBlue";
    string fileColor = isParentElementOrFile ? "orange" : "darkorange";

    string isElementTitle = ElementsVisibilityUtility.IsElementWidthPanelVisible(Model.ContentItemViewModel) ? "true" : "false";
    string sectionTitlteVisibilityVisible = ElementsVisibilityUtility.IsSectionTitleVsibilityVisible(Model) ? "visible" : "";
}

<div id="action-form">
    <div id="action-form-wrapper" class="col-md-12">
        @using (Html.BeginForm("Edit", "Admin", FormMethod.Post, new { @id = "editForm", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            //Submit buttons
            @Html.Partial("Admin/_AdminMenu")

            if (Model.ContentItemViewModel.Parent != null)
            {
                <input id="content-type-for-parent-element" type="hidden" value="@Model.ContentItemViewModel.Parent.ContentType" />
            }

            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.ContentItemViewModel.Id)
            @Html.HiddenFor(model => model.ContentItemViewModel.Priority)
            @Html.HiddenFor(model => model.CreateEditDataViewModel.ElementLanguage)
            @*@Html.HiddenFor(model => model.CreateEditDataViewModel.ScrollTopPosition, new {@class = "tree-view-scroll-position" })*@

            <div>
                <div class="row">
                    @* Title *@
                    <div id="title-panel-wrapper" class="@ViewBag.TitleElementWidth">
                        <div id="title-panel" class="panel panel-custom">
                            <div class="panel-heading">
                                <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.Title) </h3>
                            </div>
                            <div class="panel-body text-center">
                                <div class="title-and-language-dropdown">
                                    @if (currentContentType == ContentType.Language)
                                    {
                                        <select class="form-control valid" data-val="true" data-val-required="Required" id="ContentItemViewModel_Title" name="ContentItemViewModel.Title">
                                            @*  TODO: add helper for dropdown *@
                                            @foreach (var item in Globalization.GetLanguagesForDropDown())
                                            {
                                                if (item.Value.Equals(Model.ContentItemViewModel.Title))
                                                {
                                                    <option value="@item.Value" selected="selected">@item.Key</option>
                                                }
                                                else
                                                {
                                                    <option value="@item.Value">@item.Key</option>
                                                }
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.ContentItemViewModel.Title, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ContentItemViewModel.Title)
                                    }
                                </div>
                                <div style="display: none;" class="google-maps-titles">
                                    @{
                                        var googleMapPreviewOption = Model.ContentItemViewModel.DisplayType == "GoogleMapFluid"
                                            ? GoogleMapPreviewOption.Fluid
                                            : GoogleMapPreviewOption.Normal;
                                    }

                                    @Html.Action("GoogleMapsTitlesList", "GoogleMaps", new { area = "Plugins", previewOption = googleMapPreviewOption, selectedTitle = Model.ContentItemViewModel.Title })
                                    @Html.HiddenFor(model => model.ContentItemViewModel.Title)
                                </div>
                            </div>
                        </div>
                    </div>


                    @* Route title *@
                    @if (isRouteTitleElementVisible)
                {
                        <div id="route-title-panel-wrapper" class="col-md-4">
                            <div id="route-title-panel" class="panel panel-custom">
                                <div class="panel-heading">
                                    <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.RouteTitle)</h3>
                                </div>
                                <div class="panel-body text-center">
                                    @Html.TextBoxFor(model => model.ContentItemViewModel.RouteTitle, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    }


                    @if (ElementsVisibilityUtility.IsSectionTitleVsibilityVisible(Model))
                {
                        @* Section title visibility *@
                        <div id="section-title-visibility-panel-wrapper" class="col-md-3">
                            <div id="section-title-visibility-panel" class="panel panel-custom">
                                <div class="panel-heading">
                                    <h3 class="panel-title">
                                        <label>Section title visibility</label>
                                    </h3>
                                </div>
                                <div class="panel-body text-center">
                                    @Html.DropDownListFor(model => model.ContentItemViewModel.SectionTitleVisibility, DropDownHelper.GetSectionTitleVisibilityList, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                    }

                    @*@if (Model.ContentItemViewModel.ContentType != ContentType.Project)
                        {*@@* Element visibility *@<div id="element-visibility-panel-wrapper" class="@ViewBag.ElementVisibilityWidth">
                            <div id="element-visibility-panel" class="panel panel-custom">
                                <div class="panel-heading">
                                    <h3 class="panel-title">
                                        <label>Element visibility</label>
                                    </h3>
                                </div>
                                <div class="panel-body text-center">
                                    @Html.DropDownListFor(model => model.ContentItemViewModel.ElementVisibility, DropDownHelper.GetElementVisibilityList, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        @*}*@

                    </div>

                    <div class="row">
                        @* ContentType / Link - add from page list, custom, off *@

                        @* Show ContentType except for children items of ContentType.Element and ContentType.File*@
                        @if (!Model.CreateEditDataViewModel.IsParentElementOrFile)
                {
                            <div id="content-type-panel-wrapper" class="col-md-6">
                                <div id="content-type-panel" class="panel panel-custom">
                                    <div class="panel-heading">
                                        <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.ContentType)</h3>
                                    </div>

                                    <div class="panel-body text-center">
                                        @{
                                            // List ContentTypes for children element from current element
                                            var childTypes = ContentTypeSelectorHelper.GetChildContentTypesListForEditing(currentContentType);

                                            if (!ContentTypeSelectorHelper.IsDropDownForEditingVisible(currentContentType))
                                            {
                                                <div>
                                                    <input class="form-control"
                                                           id="ContentItemViewModel_ContentType"
                                                           name="ContentItemViewModel.ContentType" type="text" readonly="readonly" value="@childTypes.First().Text">
                                                </div>
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(model => model.ContentItemViewModel.ContentType, childTypes, new { @class = "form-control" })
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                                            }
                                            else
                                            {
                                                // Adding link options and add ContentType in hidden field
                                                <div id="link-option-panel-wrapper" class="col-md-4">
                                                    <div id="link-option-panel" class="panel panel-custom">
                                                        <div class="panel-heading">
                                                            <h3 class="panel-title">
                                                                <label>Link options</label>
                                                            </h3>
                                                        </div>

                                                        <div class="panel-body text-center">
                                                            @Html.DropDownListFor(model => model.ContentItemViewModel.LinkOption, DropDownHelper.GetLinkOptionsList, new { @class = "form-control" })
                                                        </div>
                                                    </div>
                                                </div>

                                                @Html.HiddenFor(model => model.ContentItemViewModel.ContentType)
                                            }

                        @Html.ValidationMessageFor(model => model.ContentItemViewModel.ContentType)

                        @* DisplayType / Link - pages dropdown, input field for custom link *@

                        @* Show DisplayType except for children items of ContentType.Element and ContentType.File*@
                        @if (Model.CreateEditDataViewModel.DisplayTypeList != null)
                {
                    // DisplayType
                    if (!Model.CreateEditDataViewModel.IsParentElementOrFile)
                    {
                                <div id="display-type-panel-wrapper" class="col-md-6">
                                    <div id="display-type-panel" class="panel panel-custom">
                                        <div class="panel-heading">
                                            <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.DisplayType) </h3>
                                        </div>
                                        <div class="panel-body text-center">
                                            @Html.DropDownListFor(model => model.ContentItemViewModel.DisplayType, Model.CreateEditDataViewModel.DisplayTypeList, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>

                                <div id="element-width-panel-wrapper" class="col-md-3 element-width-panel">
                                    <div id="element-width-panel" class="panel panel-custom">
                                        <div class="panel-heading">
                                            <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.ElementWidth) </h3>
                                        </div>
                                        <div class="panel-body text-center">
                                            @Html.DropDownListFor(model => model.ContentItemViewModel.ElementWidth, Model.CreateEditDataViewModel.ElementWidthList, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                // Link - dropdown, input
                                <div id="link-to-with-options-panel-wrapper" class="col-md-8">
                                    @Html.Partial("Admin/_LinkToWithOptions", Model)
                                </div>

                                @Html.HiddenFor(model => model.ContentItemViewModel.DisplayType)
                            }
                            @Html.ValidationMessageFor(model => model.ContentItemViewModel.DisplayType)
                        }@* Parent *@
                        <div style="visibility: hidden;">
                            <input id="ContentViewModel_ParentId" name="ContentItemViewModel.ParentId" type="hidden" value="@Model.ContentItemViewModel.ParentId">
                        </div>
                    </div>



                    <div class="row">
                        @*@if (Model.CreateEditDataViewModel.IsParentElementOrFile || Model.CreateEditDataViewModel.ParentContentType == ContentType.Project)*@
                        @if (Model.CreateEditDataViewModel.IsParentElementOrFile)
                {
                            @* Summary *@
                            <div id="summary-panel-wrapper" class="col-md-12 summary-panel">
                                <div id="summary-panel" class="panel panel-custom">
                                    <div class="panel-heading">
                                        <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.Summary)</h3>
                                    </div>
                                    <div class="panel-body">
                                        <div id="summary-element" class="tinymce-element">
                                            @Html.TextAreaFor(model => model.ContentItemViewModel.Summary, new { style = "visibility: hidden;" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ContentItemViewModel.Summary)
                                    </div>
                                </div>
                            </div>
                        }
                        @* FileUrl *@
                        <div id="file-url-panel-wrapper" class="col-md-12">
                            <div id="file-url-panel" class="panel panel-custom">
                                <div class="panel-heading">
                                    <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.FileUrl)</h3>
                                </div>
                                <div class="panel-body">
                                    @if (CheckExistence.IsUrlExist(Model.ContentItemViewModel.FileUrl) && CheckFileType.IsFileImage(Model.ContentItemViewModel.FileUrl))
                                    {
                                        <div class="pull-left">
                                            <a class="image-link" href="@Model.ContentItemViewModel.FileUrl"><img class="preview-for-uploaded-image" src="@Model.ContentItemViewModel.FileUrl" alt="img"></a>
                                        </div>
                                    }
                                    @Html.TextBoxFor(model => model.ContentItemViewModel.FileUrl, new { @class = "pull-left form-control file-url-input", @readonly = "readonly" })
                                    <button id="OpenFileManager" class="pull-right btn btn-primary file-url-button"><span style="margin-right: 2px;" class="glyphicon glyphicon-folder-open"> </span> Open file manager</button>
                                </div>
                            </div>
                        </div>

                    </div>


                    @if (Model.CreateEditDataViewModel.IsParentElementOrFile)
                    {
                        @* Content *@
                        <div class="row">
                            <div id="content-panel-wrapper" class="col-md-12 content-panel">
                                <div id="content-panel" class="panel panel-custom">
                                    <div class="panel-heading">
                                        <h3 class="panel-title">@Html.LabelFor(model => model.ContentItemViewModel.Content)</h3>
                                    </div>
                                    <div class="panel-body">
                                        <div id="content-element" class="tinymce-element">
                                            @Html.TextAreaFor(model => model.ContentItemViewModel.Content, new { style = "visibility: hidden;" })
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ContentItemViewModel.Content)
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

                                            }

        @Html.Partial("_PopupMessages")
        @Html.Partial("FileManager/_FileManagerReadModePopup")

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }

        <script type="text/javascript">
            $('title').html('Admin / Edit');

            $(function () {
                // TODO: use events before and after (loader purpose)
                $('#OpenFileManager').fileManagerPopupHandler({
                    actionType: 'read',
                    popupId: '#files-popup',
                    popupContentClass: '.files-popup-content',
                    classToRemove: 'popup-success',
                    classToAdd: 'popup-info',
                    urlToLoad: '/filemanager/popupreadmode?inputIdToShowFileUrl=ContentItemViewModel_FileUrl',
                    onLoadStartCallback:  $('.gears-wrapper').show(),
                    onLoadCompleteCallback: $('.gears-wrapper').hide()
                });

                $('#editForm').adminFormFieldsVisibilityHandler({
                    selectedActionPage: "Edit",
                    elementColor: "@elementColor",
                    fileColor: "@fileColor",
                    contentItemTitle: "#ContentItemViewModel_Title",
                    contentType: "#ContentItemViewModel_ContentType",
                    displayType: "#ContentItemViewModel_DisplayType",
                    fileUrl: "#ContentItemViewModel_FileUrl",
                    fileUrlContent: "@Model.ContentItemViewModel.FileUrl",
                    summary: "#ContentItemViewModel_Summary",
                    content: "#ContentItemViewModel_Content",
                    elementVisibility: "#ContentItemViewModel_ElementVisibility",
                    sectionVisibility: "#ContentItemViewModel_SectionTitleVisibility",
                    linkOption: "#ContentItemViewModel_LinkOption",
                    isElementTitle: @isElementTitle,
                    sectionTitlteVisibilityVisible: "@sectionTitlteVisibilityVisible"
                });
            });
        </script>
    </div>
</div>